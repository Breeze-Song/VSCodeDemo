pub fn ramfs_get_inode(sb: &mut super_block, dir: &inode, mode: umode_t, dev: dev_t) -> Option<&mut inode> {
    if let Some(inode) = new_inode(sb) {
        inode.i_ino = get_next_ino();
        inode_init_owner(&init_user_ns, inode, dir, mode);
        inode.i_mapping.a_ops = &ram_aops;
        mapping_set_gfp_mask(&mut inode.i_mapping, GFP_HIGHUSER);
        mapping_set_unevictable(&mut inode.i_mapping);
        let now = current_time(inode);
        inode.i_atime = now;
        inode.i_mtime = now;
        inode.i_ctime = now;
        match mode & S_IFMT {
            S_IFREG => {
                inode.i_op = &ramfs_file_inode_operations;
                inode.i_fop = &ramfs_file_operations;
            }
            S_IFDIR => {
                inode.i_op = &ramfs_dir_inode_operations;
                inode.i_fop = &simple_dir_operations;
                inc_nlink(inode);
            }
            S_IFLNK => {
                inode.i_op = &page_symlink_inode_operations;
                inode_nohighmem(inode);
            }
            _ => {
                init_special_inode(inode, mode, dev);
            }
        }
        Some(inode)
    } else {
        None
    }
}