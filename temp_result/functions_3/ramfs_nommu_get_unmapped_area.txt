fn ramfs_nommu_get_unmapped_area(
	file: *mut file,
	addr: usize,
	len: usize,
	pgoff: usize,
	flags: usize,
) -> usize {
	let inode = file_inode(file);
	let lpages = (len + PAGE_SIZE - 1) >> PAGE_SHIFT;
	let isize = i_size_read(inode);
	let mut ret = (-ENOSYS) as usize;
	let maxpages = ((isize as usize) + PAGE_SIZE - 1) >> PAGE_SHIFT;
	if pgoff >= maxpages {
		return ret;
	}
	if maxpages - pgoff < lpages {
		return ret;
	}
	let mut fbatch: folio_batch = Default::default();
	folio_batch_init(&mut fbatch);
	let mut nr_pages = 0;
	let mut pgoff_mut = pgoff;
	loop {
		let nr_folios = filemap_get_folios_contig(inode.i_mapping, &mut pgoff_mut, ULONG_MAX, &mut fbatch);
		if nr_folios == 0 {
			ret = (-ENOSYS) as usize;
			return ret;
		}
		if ret == (-ENOSYS) as usize {
			ret = folio_address(fbatch.folios[0]) as usize;
			let pfn = folio_pfn(fbatch.folios[0]);
			for i in 0..nr_folios {
				if pfn + nr_pages != folio_pfn(fbatch.folios[i]) {
					ret = (-ENOSYS) as usize;
					folio_batch_release(&mut fbatch);
					return ret;
				}
				nr_pages += folio_nr_pages(fbatch.folios[i]);
				if nr_pages >= lpages {
					folio_batch_release(&mut fbatch);
					return ret;
				}
			}
		} else {
			let pfn = folio_pfn(fbatch.folios[0]);
			for i in 0..nr_folios {
				if pfn + nr_pages != folio_pfn(fbatch.folios[i]) {
					ret = (-ENOSYS) as usize;
					folio_batch_release(&mut fbatch);
					return ret;
				}
				nr_pages += folio_nr_pages(fbatch.folios[i]);
				if nr_pages >= lpages {
					folio_batch_release(&mut fbatch);
					return ret;
				}
			}
		}
		if nr_pages < lpages {
			folio_batch_release(&mut fbatch);
			continue;
		}
	}
}