fn ramfs_nommu_expand_for_mapping(inode: *mut inode, newsize: usize) -> i32 {
    let order = get_order(newsize);
    if order >= MAX_ORDER {
        return -EFBIG;
    }
    let ret = inode_newsize_ok(inode, newsize);
    if ret != 0 {
        return ret;
    }
    i_size_write(inode, newsize);
    let gfp = mapping_gfp_mask(unsafe { (*inode).i_mapping });
    let pages = alloc_pages(gfp, order);
    if pages.is_null() {
        return -ENOMEM;
    }
    let xpages = 1usize << order;
    let npages = (newsize + PAGE_SIZE - 1) >> PAGE_SHIFT;
    split_page(pages, order);
    for loop_index in npages..xpages {
        unsafe {
            __free_page(pages.add(loop_index));
        }
    }
    let newsize = PAGE_SIZE * npages;
    let data = page_address(pages);
    memset(data, 0, newsize);
    let mut loop_index = 0;
    while loop_index < npages {
        let page = unsafe { pages.add(loop_index) };
        let ret = add_to_page_cache_lru(page, unsafe { (*inode).i_mapping }, loop_index, gfp);
        if ret < 0 {
            while loop_index < npages {
                unsafe {
                    __free_page(pages.add(loop_index));
                }
                loop_index += 1;
            }
            return ret;
        }
        SetPageDirty(page);
        SetPageUptodate(page);
        unlock_page(page);
        put_page(page);
        loop_index += 1;
    }
    0
}